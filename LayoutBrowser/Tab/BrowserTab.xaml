<UserControl x:Class="LayoutBrowser.Tab.BrowserTab"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:LayoutBrowser"
             xmlns:wpf="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
             xmlns:utils="clr-namespace:WpfAppCommon.Utils;assembly=WpfAppCommon"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:tab="clr-namespace:LayoutBrowser.Tab"
             xmlns:wf="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"
             xmlns:window="clr-namespace:LayoutBrowser.Window"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             DataContext="{Binding ViewModel, RelativeSource={RelativeSource Mode=Self}}">
    <Grid>
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key="BoolToVis" />

            <utils:WidthToThicknessConverter x:Key="BottomNegativeThicknessConv" Side="Bottom" Invert="True" />
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" Visibility="{Binding ParentWindow.UiVisible, Converter={StaticResource BoolToVis}}">
            <Button DockPanel.Dock="Left" Command="{Binding RefreshBtnCommand}"
                    ToolTip="{Binding RefreshButtonHint}"
                    Padding="0" FontSize="16" VerticalContentAlignment="Stretch">
                <Button.Resources>
                    <Storyboard x:Key="LoadingPulse" RepeatBehavior="Forever">
                        <ColorAnimation BeginTime="00:00:00.000"
                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                        From="DeepSkyBlue"
                                        To="LightBlue"
                                        Duration="00:00:01.000" />
                        <ColorAnimation BeginTime="00:00:01.000"
                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                        To="DeepSkyBlue"
                                        From="LightBlue"
                                        Duration="0:0:1.00" />
                    </Storyboard>
                </Button.Resources>

                <Button.Content>
                    <Border Padding="0" Margin="0" Width="18" VerticalAlignment="Stretch" BorderThickness="0" Background="Transparent">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsNavigating}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard Name="LoadingStart" Storyboard="{StaticResource LoadingPulse}"/>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <StopStoryboard BeginStoryboardName="LoadingStart" />
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <TextBlock Margin="0,-2,1,0" HorizontalAlignment="Center" Text="{Binding RefreshButtonText}" />
                    </Border>
                </Button.Content>
            </Button>

            <Button DockPanel.Dock="Right" Margin="0,0,0,0" ToolTip="Additional settings" Content="⋮" Width="20" x:Name="menuButton">
                <i:Interaction.Behaviors>
                    <utils:DropDownButtonBehavior />
                </i:Interaction.Behaviors>

                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem IsEnabled="False" StaysOpenOnClick="True" ToolTip="Settings applicable to the current tab" Header="Per-tab:" />
                        <MenuItem IsCheckable="True" IsChecked="{Binding Hidden, Mode=TwoWay}" Header="Hidden" ToolTip="Hide browser contents. Useful if you want to hide actively updating page without minimizing it. Can also be toggled by right-clicking the Minimize button." ToolTipService.ShowDuration="999999999" />
                        <MenuItem StaysOpenOnClick="True" ToolTipService.ShowDuration="999999999" ToolTip="Additional time to wait after page load before restoring scroll position. Useful for when content is loaded dynamically by the page.">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center" Margin="0,0,4,0">Scroll restore delay:</TextBlock>
                                    <xctk:TimeSpanUpDown ShowDays="False" ShowSeconds="True" FractionalSecondsDigitsCount="3" TextAlignment="Right" Value="{Binding ScrollRestore.ScrollDelay}" Minimum="00:00:00"
                                                         VerticalAlignment="Center" ShowButtonSpinner="True" BorderThickness="0" Padding="5,0,5,0" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem Header="Negative margin" ToolTipService.ShowDuration="999999999" ToolTip="A way to apply negative margin to the root element of the web page. Useful for hiding fixed floating elements like top menu bars and side bars">
                            <MenuItem StaysOpenOnClick="True" Header="Enabled" IsCheckable="True" IsChecked="{Binding NegativeMargin.Enabled}"
                                      ToolTipService.ShowDuration="999999999" ToolTip="A way to apply negative margin to the root element of the web page. Useful for hiding fixed floating elements like top menu bars and side bars" />
                            <MenuItem StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock VerticalAlignment="Center" Margin="0,0,4,0">Top:</TextBlock>
                                        <xctk:DoubleUpDown TextAlignment="Right" Value="{Binding NegativeMargin.MarginTop}" Increment="1" FormatString="0.0"
                                                           VerticalAlignment="Center" ShowButtonSpinner="True" BorderThickness="0" Padding="5,0,5,0" />

                                        <TextBlock VerticalAlignment="Center" Margin="4,0,0,0">px</TextBlock>
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock VerticalAlignment="Center" Margin="0,0,4,0">Right:</TextBlock>
                                        <xctk:DoubleUpDown TextAlignment="Right" Value="{Binding NegativeMargin.MarginRight}" Increment="1" FormatString="0.0"
                                                           VerticalAlignment="Center" ShowButtonSpinner="True" BorderThickness="0" Padding="5,0,5,0" />

                                        <TextBlock VerticalAlignment="Center" Margin="4,0,0,0">px</TextBlock>
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock VerticalAlignment="Center" Margin="0,0,4,0">Bottom:</TextBlock>
                                        <xctk:DoubleUpDown TextAlignment="Right" Value="{Binding NegativeMargin.MarginBottom}" Increment="1" FormatString="0.0"
                                                           VerticalAlignment="Center" ShowButtonSpinner="True" BorderThickness="0" Padding="5,0,5,0" />

                                        <TextBlock VerticalAlignment="Center" Margin="4,0,0,0">px</TextBlock>
                                        <TextBlock VerticalAlignment="Center" Margin="2,0,0,0" Padding="2,0,2,0" ToolTipService.InitialShowDelay="0" ToolTipService.ShowDuration="999999999" ToolTip="This setting is implemented differently from the rest, and when it's not zero the window will lose its resizing grip on the bottom border. Corners are still active for resizing, though.">⚠️
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{Binding Source={x:Static SystemParameters.WindowGlassBrush}}"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem StaysOpenOnClick="True">
                                <MenuItem.Header>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock VerticalAlignment="Center" Margin="0,0,4,0">Left:</TextBlock>
                                        <xctk:DoubleUpDown TextAlignment="Right" Value="{Binding NegativeMargin.MarginLeft}" Increment="1" FormatString="0.0"
                                                           VerticalAlignment="Center" ShowButtonSpinner="True" BorderThickness="0" Padding="5,0,5,0" />

                                        <TextBlock VerticalAlignment="Center" Margin="4,0,0,0">px</TextBlock>
                                    </StackPanel>
                                </MenuItem.Header>
                            </MenuItem>
                            <MenuItem StaysOpenOnClick="True" Header="Left/Right as native margin" IsCheckable="True" IsChecked="{Binding NegativeMargin.LeftRightNativeMode}"
                                      ToolTipService.ShowDuration="999999999" ToolTip="Switches left/right margin application from inside the browser via CSS (when off) to changing the position of the browser view (when on). Useful when the page uses size of the viewport to position its components. When this is on the window unfortunately loses resizing grips on the sides with negative margin." />
                        </MenuItem>

                        <Separator />
                        <MenuItem IsEnabled="False" StaysOpenOnClick="True" ToolTip="Settings applicable to the current window" Header="Per-window:" />
                        <MenuItem Header="Change icon" Command="{Binding ParentWindow.ChangeIconCommand}">
                            <MenuItem.Icon>
                                <Image Source="{Binding ParentWindow.IconPath}" />
                            </MenuItem.Icon>
                        </MenuItem>

                        <Separator />
                        <MenuItem IsEnabled="False" StaysOpenOnClick="True" ToolTip="Settings applicable to the whole window layout" Header="Global:" />
                        <MenuItem Header="Window order locked" IsCheckable="True" IsChecked="{Binding LayoutMgr.LayoutLocked, Mode=TwoWay}" />
                        <MenuItem Header="Maintain order with ToBack" ToolTipService.ShowDuration="999999999" ToolTip="Maintain window order, when locked, by bringing the overlapping windows to back instead of by bringing overlapped windows to front. Can be useful when you've got other applications overlapping browser windows and want them to stay on top of the browser." IsCheckable="True" IsChecked="{Binding LayoutMgr.LayoutRestoreUsingToBack, Mode=TwoWay}" />
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>

            <Button DockPanel.Dock="Right" Margin="0,0,-1,0" ToolTipService.ShowDuration="999999999">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="ToolTip" Value="Settings for page auto-refresh" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding AutoRefresh.AutoRefreshEnabled}" Value="True">
                                <Setter Property="ToolTip" Value="Time till next page auto-refresh (format: [d.]hh:mm:ss)" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>

                <Button.Content>
                    <StackPanel Orientation="Horizontal">
                        <Grid>
                            <TextBlock Text="↻" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding AutoRefresh.RefreshTriggered}" Value="True">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <TextBlock>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Text" Value="Auto ↻" />
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding AutoRefresh.RefreshTriggered}" Value="True">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding AutoRefresh.AutoRefreshEnabled}" Value="True" />
                                                    <Condition Binding="{Binding AutoRefresh.ShowDateInSpanStart}" Value="False" />
                                                </MultiDataTrigger.Conditions>

                                                <Setter Property="Text" Value="{Binding AutoRefresh.TillNextRefresh, StringFormat='{}{0:hh\\:mm\\:ss}'}" />
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding AutoRefresh.AutoRefreshEnabled}" Value="True" />
                                                    <Condition Binding="{Binding AutoRefresh.ShowDateInSpanStart}" Value="True" />
                                                </MultiDataTrigger.Conditions>

                                                <Setter Property="Text" Value="{Binding AutoRefresh.TillNextRefresh, StringFormat='{}{0:d\\.hh\\:mm\\:ss}'}" />
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                        <Path Margin="2" VerticalAlignment="Center" Width="6" Fill="Black" Stretch="Uniform" HorizontalAlignment="Right" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "/>
                    </StackPanel>
                </Button.Content>

                <i:Interaction.Behaviors>
                    <utils:DropDownButtonBehavior />
                </i:Interaction.Behaviors>

                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Auto-refresh enabled" IsCheckable="True" StaysOpenOnClick="True" IsChecked="{Binding AutoRefresh.AutoRefreshEnabled, Mode=TwoWay}" />
                        <MenuItem StaysOpenOnClick="True">
                            <MenuItem.Header>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center" Margin="0,0,4,0">Interval:</TextBlock>
                                    <xctk:TimeSpanUpDown ShowDays="False" ShowSeconds="True" TextAlignment="Right" Value="{Binding AutoRefresh.AutoRefreshSpan}" Minimum="00:00:01"
                                                         VerticalAlignment="Center" ShowButtonSpinner="True" BorderThickness="0" Padding="5,0,5,0" ToolTipService.ShowDuration="999999999" ToolTip="Interval between page auto-refreshes (format: HH:mm:ss, hours can be grater than 24)" />
                                </StackPanel>
                            </MenuItem.Header>
                        </MenuItem>
                        <MenuItem StaysOpenOnClick="True">
                            <MenuItem.Style>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding AutoRefresh.AutoRefreshEnabled}" Value="True">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>

                            <MenuItem.Header>
                                <TextBlock>
                                    <Run>Since</Run>
                                    <Run>
                                        <Run.Style>
                                            <Style TargetType="Run">
                                                <Setter Property="Text" Value="{Binding AutoRefresh.RefreshSpanStart, StringFormat='T'}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding AutoRefresh.ShowDateInSpanStart}" Value="True">
                                                        <Setter Property="Text" Value="{Binding AutoRefresh.RefreshSpanStart, StringFormat='G'}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Run.Style>
                                    </Run>
                                </TextBlock>
                            </MenuItem.Header>
                        </MenuItem>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>

            <Button DockPanel.Dock="Right" ToolTip="Browser profile used for this tab" Margin="0,0,-1,0">
                <Button.Content>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock>👤</TextBlock>
                        <TextBlock Text="{Binding Profile.Caption}" />
                        <Path Margin="2" VerticalAlignment="Center" Width="6" Fill="Black" Stretch="Uniform" HorizontalAlignment="Right" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "/>
                    </StackPanel>
                </Button.Content>
                <i:Interaction.Behaviors>
                    <utils:DropDownButtonBehavior />
                </i:Interaction.Behaviors>

                <Button.Resources>
                    <tab:DefaultItemContainerTemplateSelector x:Key="Dicts" />
                </Button.Resources>

                <Button.ContextMenu>
                    <ContextMenu ItemsSource="{Binding ProfileList.ListItems}" ItemContainerTemplateSelector="{StaticResource Dicts}" UsesItemContainerTemplate="True">
                        <ContextMenu.Resources>
                            <ItemContainerTemplate x:Key="{x:Type tab:ProfileListItem}" DataType="{x:Type tab:ProfileListItem}">
                                <MenuItem Header="{Binding Model.Caption}"
                                          IsChecked="{Binding IsChecked, Mode=OneWay}"
                                          Command="{Binding SelectedCommand}"/>
                            </ItemContainerTemplate>
                            <ItemContainerTemplate x:Key="{x:Type tab:ProfileListSeparator}" DataType="{x:Type tab:ProfileListSeparator}">
                                <Separator />
                            </ItemContainerTemplate>
                            <ItemContainerTemplate x:Key="{x:Type tab:ProfileListCreateNew}" DataType="{x:Type tab:ProfileListCreateNew}">
                                <MenuItem Header="Create New..."
                                          Command="{Binding SelectedCommand}"/>
                            </ItemContainerTemplate>
                        </ContextMenu.Resources>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>

            <Button DockPanel.Dock="Right" Command="{Binding GoBtnCommand}" Content="▷" Padding="0,-2,1,0" Margin="0,0,-1,0" Width="20" FontSize="16" />

            <TextBox x:Name="urlBar" Text="{Binding Url, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalContentAlignment="Center" BorderThickness="0,0,0,1"
                     utils:TextBoxBehavior.SelectAllTextOnFocus="True" utils:TextBoxBehavior.UnselectAllTextOnFocusLeave="True">
                <TextBox.InputBindings>
                    <KeyBinding Key="Return" Command="{Binding GoBtnCommand}" />
                </TextBox.InputBindings>
            </TextBox>
        </DockPanel>

        <Grid Grid.Row="1" Background="Black">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Hidden}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
        </Grid>

        <wpf:WebView2 Grid.Row="1"
                      x:Name="webView"
                      CreationProperties="{Binding CreationProperties}"
                      Source="{Binding BrowserSource, Mode=TwoWay}"
                      ZoomFactor="{Binding ZoomFactor, Mode=TwoWay}"
                      NavigationStarting="OnNavigationStarted"
                      NavigationCompleted="OnNavigationCompleted"
                      Margin="{Binding NegativeMargin.NativeMargin}">
            <wpf:WebView2.Style>
                <Style TargetType="wpf:WebView2">
                    <Setter Property="Visibility" Value="Visible" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Hidden}" Value="True">
                            <Setter Property="Visibility" Value="Hidden" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </wpf:WebView2.Style>
        </wpf:WebView2>
    </Grid>
</UserControl>
